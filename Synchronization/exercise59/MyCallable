import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class MyCallable implements Callable {

    private String name;

    public MyCallable(String name) {
        this.name = name;
    }

    public String call() {
        ArrayList<Integer> numbersList = new ArrayList<>();

        for (int i = 0; i < 10; i++) {
            numbersList.add((int) (Math.random() * 20));
        }
        System.out.println(Thread.currentThread().getName() +  "(" + name + ")" + " generate" +
                " collection :" + numbersList);
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Integer sum = 0;
        for (Integer i : numbersList) {
            sum += i;
        }
        System.out.println(Thread.currentThread().getName() + "(" + name + ")" + " count sum = " + sum);
        return sum.toString();
    }

    public static void main(String[] args) {
        ExecutorService pool = Executors.newFixedThreadPool(3);
        List<Future<String>> list = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            Callable<String> callable = new MyCallable("" + i);
            Future<String> future = pool.submit(callable);
            list.add(future);
        }
        for (Future<String> fut : list) {
            try {
                System.out.println(fut.get());
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }

        System.exit(1);

    }
}
